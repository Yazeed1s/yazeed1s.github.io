<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yazeed</title>
    <link>http://localhost:1313/blog/posts/</link>
    <description>Recent content in Posts on Yazeed</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Inner workings of BSP-Trees in the context of window management</title>
      <link>http://localhost:1313/blog/posts/bsp/</link>
      <pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/bsp/</guid>
      <description>Few months back, I was sick and tired of writing work-related code, so I decided to start a side project just to revive the fun of programming in me. I had a bunch of ideas floating around in my head, but I eventually settled on creating my own tiling window manager from scratch because it was both practical and challenging. At work, I&amp;rsquo;d been diving into various spatial data structures, and one in particular caught my eye - the binary space partitioning tree (BSP-tree).</description>
    </item>
    <item>
      <title>Force Memory Cleanup on Crash in C Programs</title>
      <link>http://localhost:1313/blog/posts/force_memory_cleanup/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/force_memory_cleanup/</guid>
      <description>As you might already know.. In C (and other compiled languages as well) the main function serves as the entry point for program execution. It controls program execution by directing the calls to whatever code lives inside its body sequentially. Typically, sane programmers craft cleanup code that gets executed at the end of the program to free any allocated resources and give it back to the OS. This is simply done by calling free() on heap allocated object(s) before the main routine returns and exits out.</description>
    </item>
  </channel>
</rss>
